{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\COLLEGE STUFF\\\\SOPH\\\\fall\\\\cs307\\\\project\\\\Corec-Tracker\\\\corec-dashboard\\\\src\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory, useParams } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Overlay from \"react-overlays/esm/Overlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errMessage, setErrMessage] = useState(\"\");\n  const history = useHistory();\n  const {\n    token\n  } = useParams();\n\n  async function handleResetPassword(res) {\n    //const queryParams = new URLSearchParams(window.location.search);\n    //const token = queryParams.get('token');\n    if (password !== passwordConfirm) {\n      setErrpor(true);\n      setErrMessage(\"Passwords don't match\");\n    } else {\n      const encodedValue = encodeURIComponent(token);\n      const response = await fetch(`/password/reset/submit?token=${encodedValue}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          password: password\n        })\n      });\n      history.push(\"/\");\n    }\n  }\n\n  function displayError() {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(Overlay, {\n        show: error,\n        placement: \"right\",\n        children: ({\n          placement,\n          arrowProps,\n          show: _show,\n          popper,\n          ...props\n        }) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n          style: {\n            backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n            padding: \"2px 10px\",\n            color: \"white\",\n            borderRadius: 3,\n            ...props.style\n          },\n          children: errMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ResetPassword\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forgot Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        size: \"lg\",\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          autoFocus: true,\n          type: \"password\",\n          value: passwordConfirm,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          autoFocus: true,\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        block: true,\n        size: \"lg\",\n        type: \"submit\",\n        onClick: handleResetPassword,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), displayError()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"JLU4RnaNnm8MNW+f4ez1xy+n8J0=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["C:/Users/danie/Desktop/COLLEGE STUFF/SOPH/fall/cs307/project/Corec-Tracker/corec-dashboard/src/ResetPassword.js"],"names":["React","useState","BrowserRouter","Router","Switch","Route","Link","useHistory","useParams","Form","Button","Overlay","ResetPassword","password","setPassword","passwordConfirm","setPasswordConfirm","error","setError","errMessage","setErrMessage","history","token","handleResetPassword","res","setErrpor","encodedValue","encodeURIComponent","response","fetch","method","headers","body","JSON","stringify","push","displayError","placement","arrowProps","show","_show","popper","props","backgroundColor","padding","color","borderRadius","style","e","target","value"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useHistory,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Overlay from \"react-overlays/esm/Overlay\";\r\n\r\nfunction ResetPassword() {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const history = useHistory();\r\n  const { token } = useParams();\r\n\r\n  async function handleResetPassword(res) {\r\n    //const queryParams = new URLSearchParams(window.location.search);\r\n    //const token = queryParams.get('token');\r\n    if (password !== passwordConfirm) {\r\n      setErrpor(true);\r\n      setErrMessage(\"Passwords don't match\");\r\n    } else {\r\n      const encodedValue = encodeURIComponent(token);\r\n      const response = await fetch(\r\n        `/password/reset/submit?token=${encodedValue}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            password: password,\r\n          }),\r\n        }\r\n      );\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  function displayError() {\r\n    if (error) {\r\n      return (\r\n        <Overlay show={error} placement=\"right\">\r\n          {({ placement, arrowProps, show: _show, popper, ...props }) => (\r\n            <div\r\n              {...props}\r\n              style={{\r\n                backgroundColor: \"rgba(255, 100, 100, 0.85)\",\r\n                padding: \"2px 10px\",\r\n                color: \"white\",\r\n                borderRadius: 3,\r\n                ...props.style,\r\n              }}\r\n            >\r\n              {errMessage}\r\n            </div>\r\n          )}\r\n        </Overlay>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ResetPassword\">\r\n      <h1>Forgot Password</h1>\r\n      <Form>\r\n        <Form.Group size=\"lg\" controlId=\"password\">\r\n          <Form.Label>New Password</Form.Label>\r\n          <Form.Control\r\n            autoFocus\r\n            type=\"password\"\r\n            value={passwordConfirm}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <Form.Label>Confirm New Password</Form.Label>\r\n          <Form.Control\r\n            autoFocus\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Button block size=\"lg\" type=\"submit\" onClick={handleResetPassword}>\r\n          Reset Password\r\n        </Button>\r\n        {displayError()}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"]},"metadata":{},"sourceType":"module"}