{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danie\\\\Desktop\\\\COLLEGE STUFF\\\\SOPH\\\\fall\\\\cs307\\\\project\\\\Corec-Tracker\\\\corec-dashboard\\\\src\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory, useParams } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Overlay from \"react-overlays/esm/Overlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errMessage, setErrMessage] = useState(\"\");\n  const history = useHistory();\n  const {\n    token\n  } = useParams();\n\n  async function handleResetPassword(res) {\n    //const queryParams = new URLSearchParams(window.location.search);\n    //const token = queryParams.get('token');\n    console.log(token); // if (password.length() == 0 && password !== passwordConfirm) {\n    //   setError(true);\n    //   setErrMessage(\"Passwords don't match\");\n    // } else {\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password: password,\n        passwordConfirm: passwordConfirm\n      })\n    };\n    const encodedValue = encodeURIComponent(token);\n    const response = await fetch(\"/password/reset/submit?token=\" + encodedValue, requestOptions);\n\n    if (response.ok) {\n      history.push(\"/\");\n    } else {\n      const x = await response.json();\n      console.log(x);\n      setError(true);\n      setErrMessage(x.message);\n    } //}\n\n  }\n\n  function isValid() {\n    return password.length > 0 && passwordConfirm.length > 0;\n  }\n\n  function displayError() {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Overlay, {\n          show: error,\n          placement: \"right\",\n          children: ({\n            placement,\n            arrowProps,\n            show: _show,\n            popper,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"div\", { ...props,\n            style: {\n              backgroundColor: \"rgba(255, 100, 100, 0.85)\",\n              padding: \"2px 10px\",\n              color: \"white\",\n              borderRadius: 3,\n              ...props.style\n            },\n            children: errMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ResetPassword\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        size: \"lg\",\n        controlId: \"password\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          autoFocus: true,\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          autoFocus: true,\n          type: \"password\",\n          value: passwordConfirm,\n          onChange: e => setPasswordConfirm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        block: true,\n        size: \"lg\",\n        type: \"submit\",\n        onClick: handleResetPassword,\n        disabled: !isValid(),\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), displayError()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"JLU4RnaNnm8MNW+f4ez1xy+n8J0=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["C:/Users/danie/Desktop/COLLEGE STUFF/SOPH/fall/cs307/project/Corec-Tracker/corec-dashboard/src/ResetPassword.js"],"names":["React","useState","BrowserRouter","Router","Switch","Route","Link","useHistory","useParams","Form","Button","Overlay","ResetPassword","password","setPassword","passwordConfirm","setPasswordConfirm","error","setError","errMessage","setErrMessage","history","token","handleResetPassword","res","console","log","requestOptions","method","headers","body","JSON","stringify","encodedValue","encodeURIComponent","response","fetch","ok","push","x","json","message","isValid","length","displayError","placement","arrowProps","show","_show","popper","props","backgroundColor","padding","color","borderRadius","style","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useHistory,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Overlay from \"react-overlays/esm/Overlay\";\r\n\r\nfunction ResetPassword() {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n  const history = useHistory();\r\n  const { token } = useParams();\r\n\r\n  async function handleResetPassword(res) {\r\n    //const queryParams = new URLSearchParams(window.location.search);\r\n    //const token = queryParams.get('token');\r\n    console.log(token);\r\n    // if (password.length() == 0 && password !== passwordConfirm) {\r\n    //   setError(true);\r\n    //   setErrMessage(\"Passwords don't match\");\r\n    // } else {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        password: password,\r\n        passwordConfirm: passwordConfirm,\r\n      }),\r\n    };\r\n    const encodedValue = encodeURIComponent(token);\r\n    const response = await fetch(\r\n      \"/password/reset/submit?token=\" + encodedValue,\r\n      requestOptions\r\n    );\r\n\r\n    if (response.ok) {\r\n      history.push(\"/\");\r\n    } else {\r\n      const x = await response.json();\r\n      console.log(x);\r\n      setError(true);\r\n      setErrMessage(x.message);\r\n    }\r\n    //}\r\n  }\r\n\r\n  function isValid() {\r\n    return password.length > 0 && passwordConfirm.length > 0;\r\n  }\r\n\r\n  function displayError() {\r\n    if (error) {\r\n      return (\r\n        <div>\r\n          <Overlay show={error} placement=\"right\">\r\n            {({ placement, arrowProps, show: _show, popper, ...props }) => (\r\n              <div\r\n                {...props}\r\n                style={{\r\n                  backgroundColor: \"rgba(255, 100, 100, 0.85)\",\r\n                  padding: \"2px 10px\",\r\n                  color: \"white\",\r\n                  borderRadius: 3,\r\n                  ...props.style,\r\n                }}\r\n              >\r\n                {errMessage}\r\n              </div>\r\n            )}\r\n          </Overlay>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"ResetPassword\">\r\n      <h1>Reset Password</h1>\r\n      <Form onSubmit={(e) => e.preventDefault()}>\r\n        <Form.Group size=\"lg\" controlId=\"password\">\r\n          <Form.Label>New Password</Form.Label>\r\n          <Form.Control\r\n            autoFocus\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <Form.Label>Confirm New Password</Form.Label>\r\n          <Form.Control\r\n            autoFocus\r\n            type=\"password\"\r\n            value={passwordConfirm}\r\n            onChange={(e) => setPasswordConfirm(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Button block size=\"lg\" type=\"submit\" onClick={handleResetPassword} disabled={!isValid()}>\r\n          Reset Password\r\n        </Button>\r\n      </Form>\r\n      {displayError()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"]},"metadata":{},"sourceType":"module"}